apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

archivesBaseName = 'vault-java-driver'
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly('org.projectlombok:lombok:1.16.16')

    testCompile('junit:junit:4.11')
    testCompile('org.mockito:mockito-core:1.10.19')
    testCompile('org.testcontainers:testcontainers:1.3.0')
    testCompile('org.eclipse.jetty:jetty-server:9.3.7.v20160115')
    testCompile('org.slf4j:slf4j-api:1.7.25')

    testRuntime('org.slf4j:slf4j-simple:1.7.25')
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


//
// Separate unit tests from integration tests.  See: `src/test-integration/README.md`
//

configurations {
    unitTestsCompile.extendsFrom testCompile
    unitTestsRuntime.extendsFrom testRuntime
    integrationTestsCompile.extendsFrom testCompile
    integrationTestsRuntime.extendsFrom testRuntime
}

sourceSets {
    unitTests {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/test/java')
    }
    integrationTests {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/test-integration/java')
        resources.srcDirs += file('src/test-integration/resources')
    }
}

task unitTest(type: Test) {
    testClassesDirs = sourceSets.unitTests.output.classesDirs
    classpath = sourceSets.unitTests.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task integrationTest(type: Test) {
    testClassesDirs= sourceSets.integrationTests.output.classesDirs
    classpath = sourceSets.integrationTests.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
    }
}

//
// Deploying releases to Maven Central (or snapshots to a local Nexus repository).
//
// Snapshots are not signed... but signing the release artifact requires the following project properties:
//
// signing.keyId = <ID of the private key in your secure keyring used for signing JAR's>
// signing.password = <public key password>
// signing.secretKeyRingFile = <full path to your keyring file (i.e secring.gpg)>
//
if (!hasProperty('ossrhUsername')) {
    ext.ossrhUsername = ''
}
if (!hasProperty('ossrhPassword')) {
    ext.ossrhPassword = ''
}
if (!hasProperty('nexusUrl')) {
    ext.nexusUrl = ''
}
if (!hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
}
if (!hasProperty('nexusPassword')) {
    ext.nexusPassword = ''
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://nexus.303net.net:8081/nexus/content/repositories/thirdparty") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "http://nexus.303net.net:8081/nexus/content/repositories/snapshots") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}
